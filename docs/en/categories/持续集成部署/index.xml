<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>持续集成部署 on 🇨🇳🇨🇳🇨🇳🇨🇳🇨🇳</title>
    <link>https://xuzhijvn.github.io/en/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/</link>
    <description>Recent content in 持续集成部署 on 🇨🇳🇨🇳🇨🇳🇨🇳🇨🇳</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Razon Yang. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 27 Aug 2021 11:15:10 +0800</lastBuildDate><atom:link href="https://xuzhijvn.github.io/en/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker-compose的方式启动jenkins</title>
      <link>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/docker-compose%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8jenkins/</link>
      <pubDate>Fri, 27 Aug 2021 11:15:10 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/docker-compose%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8jenkins/</guid>
      <description>docker-compose的方式启动jenkins
jenkins官网提供了多种安装方式，唯独没有提供docker compose的教程！咱也不知道为啥，所以自己动手丰衣足食。
1. 编写docker-compose.yml version: &amp;#39;3&amp;#39; services: jenkins: image: jenkinsci/blueocean container_name: jenkins user: root ports: - &amp;#39;8080:8080&amp;#39; - &amp;#39;50000:50000&amp;#39; volumes: - &amp;#39;/docker/volumes/jenkins:/var/jenkins_home&amp;#39; - &amp;#39;/var/run/docker.sock:/var/run/docker.sock&amp;#39; - &amp;#39;/usr/local/jdk1.8.0_241:/usr/local/jdk1.8.0_241&amp;#39; - &amp;#39;/usr/local/apache-maven-3.6.3:/usr/local/apache-maven-3.6.3&amp;#39; restart: always 2. 启动jenkins docker-compose up -d jenkins &amp;amp;&amp;amp; docker logs -f jenkins ==jenkins 启动时，一直处在 Please wait while Jenkins is getting ready to work &amp;hellip;== 需要更新hudson.model.UpdateCenter.xml的url：
&amp;lt;?xml version=&amp;#39;1.1&amp;#39; encoding=&amp;#39;UTF-8&amp;#39;?&amp;gt; &amp;lt;sites&amp;gt; &amp;lt;site&amp;gt; &amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;https://updates.jenkins.io/update-center.json&amp;lt;/url&amp;gt; &amp;lt;/site&amp;gt; &amp;lt;/sites&amp;gt; 更新为：
&amp;lt;?xml version=&amp;#39;1.1&amp;#39; encoding=&amp;#39;UTF-8&amp;#39;?&amp;gt; &amp;lt;sites&amp;gt; &amp;lt;site&amp;gt; &amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;http://mirror.</description>
    </item>
    
    <item>
      <title>Jenkins&#43;Docker&#43;腾讯云容器仓库&#43;Github搭建CI/CD环境.md</title>
      <link>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins&#43;docker&#43;%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%B9%E5%99%A8%E4%BB%93%E5%BA%93&#43;github%E6%90%AD%E5%BB%BAcicd%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 27 Aug 2021 11:15:10 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins&#43;docker&#43;%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%B9%E5%99%A8%E4%BB%93%E5%BA%93&#43;github%E6%90%AD%E5%BB%BAcicd%E7%8E%AF%E5%A2%83/</guid>
      <description>持续集成/持续部署的重要性不必多言，都什么年代了，没有哪个正紧项目还在人工构建/测试/部署。本文手把手教你搭建Jenkins+docker+腾讯云容器仓库+github的CI/CD环境。妥妥的干活，绝对是解放生产力的利器。架构图如下：
step1: 程序猿git push代码到github step2: jenkins通过github webhooks触发任务（ jenkins构建项目，并制作docker镜像） step3: 推送镜像到容器仓库 step4: 应用服务器拉去镜像到本地运行
为了不让文章篇幅过长，本系列tony老师将文章分成两个小章节：
Github webhooks+Jenkins搭建持续集成环境 第一章节，意在教您通过github webhooks+jenkins搭建持续集成环境，如果您已经完成webhooks+jenkins的配置，可以直接调整到第二章节
1. github配置Personal access tokens 没什么好说的，按图操作：
记下生成的token，待会儿要用的。
2. github配置webhooks 去到你的github项目仓库，按图操作：
这里的Payload URL = 你的jenkins地址+/github-webhook/
至此，github上的配置全部完成。接下来，我们配置jenkins。
3. jenkins配置凭据 这里的Secret就是在第1节配置的Personal access tokens
添加一个github登陆凭据，username和password对应github的登陆账号密码。 添加一个宿主机登陆凭据，username和password对应登陆的账号密码（因为小编的jenkins是容器的方式运行的，因此后面需要这个凭据ssh到宿主机上执行命令）。 4. 配置ssh sites 接下来配置一个ssh sites，用于后面需要ssh到宿主机。
5. 配置jenkins运行环境 这里的环境取决与你的项目需要的环境。
如果你的jenkins是直接运行在机器上，那么指定对应环境的路径即可。如果是运行在容器里面，容器启动的时候把宿主机的环境映射到容器即可。
6. 新建一个maven项目 本小节以一个maven项目为例子，下一个小节我还补充了vue项目的例子。
请按图操作： 请按图操作：
请按图操作：
这里对上图解释一下：上图的含义是，当maven构建完项目之后，制作docker镜像，并推送到远程容器仓库。当然，你也可以构建完项目之后，直接java -jar本地运行，这一切取决于你的需求！！！
7. 新建一个vue项目 你的前端可能是通过vue实现前后端分离的，那么你肯定也存在对vue编译构建的需求。
这里大部分配置和第5小节是一样的，不再赘述，需要注意的是：
上图中command的含义是: 1. 构建项目 2. 运行项目 3. 制作镜像 4，推送镜像到仓库。同第5节的maven项目一样，需要哪些步骤取决于你的需求。
通过本文，您已经掌握了当开发人员提交代码到github之后，jenkins自动构建项目/运行项目的持续集成方法。
本系列文章的jenkins+腾讯云容器仓库+docker持续部署将教你将构建好的项目制作成docker镜像，并由真正的应用服务器去运行项目，真正实现CI/CD，解放生产力。
Jenkins+腾讯云容器仓库+docker持续部署 第二章节，意在教您通过jenkins+腾讯云容器仓库+docker搭建持续部署环境，如果您还没有完成webhooks+jenkins的配置，请完成第一章节的学习</description>
    </item>
    
    <item>
      <title>Jenkins使用使用注意事项</title>
      <link>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 27 Aug 2021 11:15:10 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>Jenkins使用使用注意事项
1. 无法通过execute shell启动进程 这是因为Jenkins默认会在Build结束后Kill掉所有的衍生进程。
在执行shell前需要设置BUILD_ID=dontKillMe
BUILD_ID=dontKillMe cd /data/wwwroot/yxshop chmod +x ./*.sh nohup ./restart.sh &amp;gt;/data/wwwroot/yxshop/nohup.out 2&amp;gt;&amp;amp;1 &amp;amp; 2. github向jenkins deliver失败 一开始填写的Payload URL形如，
Payload URL = https://xxx.com/github-webhook
无论怎么修改再redeliver都失败，后来修改为形如，
Payload URL = https://xxx.com/github-webhook/
仅仅是在后面加了“/”。</description>
    </item>
    
    <item>
      <title>Jenkins安装插件提速</title>
      <link>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E6%8F%90%E9%80%9F/</link>
      <pubDate>Fri, 27 Aug 2021 11:15:10 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/jenkins%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E6%8F%90%E9%80%9F/</guid>
      <description>Jenkins安装插件提速
国内安装Jenkins插件缓慢，这是我见到最完美的解决方案。 通过【插件&amp;ndash;&amp;gt;高级&amp;ndash;&amp;gt;更新网站】替换成清华的数据源（https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json）并不好使
需要按照如下步骤操作：
进入到工作目录 $ cd {你的Jenkins工作目录}/updates #进入更新配置位置 修改default.json 方法1 $ vim default.json 替换所有插件下载的url
:1,$s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g 替换连接测试url
:1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g 进入vim先输入：然后再粘贴上边的：后边的命令，注意不要写两个冒号！
修改完成保存退出:wq
方法2 使用sed
$ sed -i &amp;#39;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&amp;#39; default.json &amp;amp;&amp;amp; sed -i &amp;#39;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&amp;#39; default.json 这是直接修改的配置文件，如果前边Jenkins用sudo启动的话，那么这里的两个sed前均需要加上sudo
重启Jenkins，安装插件试试，简直超速！！
https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html</description>
    </item>
    
    <item>
      <title>为docker容器安装工具</title>
      <link>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/%E4%B8%BAdocker%E5%AE%B9%E5%99%A8%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 27 Aug 2021 11:15:10 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/en/zh-cn/posts/cicd/%E4%B8%BAdocker%E5%AE%B9%E5%99%A8%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7/</guid>
      <description>为docker容器安装工具
因为我的docker jenkins需要node环境，默认是没有的，所以最初想法是和maven一样，将宿主机的maven和docker一起共享使用，但是不管怎么操作就不行，很诡异，同样的操作，maven可以执行，jdk和node却不行，如下所示：
version: &amp;#39;3&amp;#39; services: jenkins: image: jenkinsci/blueocean deploy: resources: limits: cpus: &amp;#39;0.50&amp;#39; memory: 1024M reservations: memory: 64M container_name: jenkins user: root ports: - &amp;#39;8080:8080&amp;#39; - &amp;#39;50000:50000&amp;#39; volumes: - &amp;#39;/docker/volumes/jenkins:/var/jenkins_home&amp;#39; - &amp;#39;/var/run/docker.sock:/var/run/docker.sock&amp;#39; - &amp;#39;/usr/local/jdk1.8.0_241:/usr/local/jdk1.8.0_241&amp;#39; - &amp;#39;/usr/local/apache-maven-3.6.3:/usr/local/apache-maven-3.6.3&amp;#39; - &amp;#39;/usr/bin/docker:/usr/bin/docker&amp;#39; - &amp;#39;/usr/local/node-v12.16.3-linux-x64:/usr/local/node-v12.16.3-linux-x64&amp;#39; restart: always 更诡异的是，虽然docker下无法执行node命令，jenkins却能调用：
这里暂且不管，请当作docker没有node环境，继续往下阅读。
经过彻夜未眠的排除，基本能定位为题的原因：本质不是node命令找不到，而是node的依赖在docker容器里面找不到，node依赖如下：
所以要么进入到容器里面使用apk add，要么自己制作镜像（这样太麻烦了），我选择前者。
进入到容器里面安装：
apk add --no-cache nodejs 可能会遇到下载缓慢、找不到包等问题。
解决办法如下：
在 https://mirrors.alpinelinux.org/ 找到中国的镜像仓库，并添加到 etc/apk/repositories, 参考如下： A. 永久修改下载源
vi etc/apk/repositories http://mirrors.aliyun.com/alpine/v3.8/main/ http://mirrors.aliyun.com/alpine/v3.8/community/ apk update B. 临时修改下载源地址 如果上面的永久源地址找不到对应的包，可使用本方法，参考如下： B.</description>
    </item>
    
  </channel>
</rss>
