<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Razon Yang</title>
    <link>https://razonyang.com/zh-tw/posts/go/</link>
    <description>Recent content in Go on Razon Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Razon Yang. All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 05 Oct 2020 14:54:12 +0800</lastBuildDate><atom:link href="https://razonyang.com/zh-tw/posts/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用 gopkgs 自定義 Go 庫的導入路徑</title>
      <link>https://razonyang.com/zh-tw/posts/go/custom-import-path-via-gopkgs/</link>
      <pubDate>Mon, 05 Oct 2020 14:54:12 +0800</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/custom-import-path-via-gopkgs/</guid>
      <description>&lt;p&gt;自定義 Go 模塊的導入路徑有一個主要的好處，當你打算更換代碼的託管服務器，比如 GitHub 換到 GitLab、Gitee 時，你不需要更改包的導入路徑。而 &lt;a href=&#34;https://gopkgs.net&#34; target=&#34;_blank&#34;&gt;gopkgs&lt;/a&gt;
 正是這樣一個 HTTP 服務，可以讓你自定義 Go 庫的導入路徑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 編寫優雅的構造函數</title>
      <link>https://razonyang.com/zh-tw/posts/go/better-constructor/</link>
      <pubDate>Thu, 12 Mar 2020 18:37:46 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/better-constructor/</guid>
      <description>&lt;p&gt;Go 編寫優雅的構造函數。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 語言的 ucfirst、lcfirst 和 ucwords</title>
      <link>https://razonyang.com/zh-tw/posts/go/ucfirst-lcfirst-ucwords/</link>
      <pubDate>Wed, 05 Feb 2020 02:33:30 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/ucfirst-lcfirst-ucwords/</guid>
      <description>&lt;p&gt;PHP 中 &lt;code&gt;ucfirst&lt;/code&gt;、&lt;code&gt;lcfirst&lt;/code&gt; 和 &lt;code&gt;ucwords&lt;/code&gt; 在 Go 語言中可以通過 &lt;code&gt;strings&lt;/code&gt; 和 &lt;code&gt;clevergo.tech/strutil&lt;/code&gt; 實現。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 語言複製指針的值</title>
      <link>https://razonyang.com/zh-tw/posts/go/copy-value-of-pointer/</link>
      <pubDate>Mon, 03 Feb 2020 03:29:11 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/copy-value-of-pointer/</guid>
      <description>&lt;p&gt;Go 語言複製指針的值可以通過 &lt;code&gt;*copy = *pointer&lt;/code&gt; 完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 語言代碼格式化工具 gofmt vs goimports</title>
      <link>https://razonyang.com/zh-tw/posts/go/gofmt-vs-goimports/</link>
      <pubDate>Sat, 04 Jan 2020 14:36:07 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/gofmt-vs-goimports/</guid>
      <description>&lt;p&gt;在格式化 Go 代碼的時候，經常會用到 &lt;strong&gt;gofmt&lt;/strong&gt; 和 &lt;strong&gt;goimports&lt;/strong&gt; 兩個工具，不過他們之間到底有何區別呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 語言實現多個子命令的腳本應用</title>
      <link>https://razonyang.com/zh-tw/posts/go/cli-subcommands/</link>
      <pubDate>Wed, 01 Jan 2020 01:18:56 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/cli-subcommands/</guid>
      <description>&lt;p&gt;像 Git，Go，Docker 等等的命令行腳本都有很多子命令，那麼我們用 Go 語言如何實現多個子命令的腳本應用呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 語言將 unit 類型轉成 string</title>
      <link>https://razonyang.com/zh-tw/posts/go/convert-unit-to-string/</link>
      <pubDate>Tue, 31 Dec 2019 22:05:56 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/convert-unit-to-string/</guid>
      <description>&lt;p&gt;Go 語言將 unit 類型轉成 string 的幾種方法和比較。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 Modd 提高 Go 開發效率</title>
      <link>https://razonyang.com/zh-tw/posts/go/modd/</link>
      <pubDate>Thu, 19 Dec 2019 09:48:10 +0000</pubDate>
      
      <guid>https://razonyang.com/zh-tw/posts/go/modd/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt; 開發不像 &lt;strong&gt;PHP&lt;/strong&gt;（解釋型語言） 那樣可以修改代碼實時生效，而需要重新編譯，如果每次手動執行肯定會降低開發速度。本文將介紹一款開發工具 &lt;a href=&#34;https://github.com/cortesi/modd&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Modd&lt;/strong&gt;&lt;/a&gt;
 來解決這一問題，它可以監控文件修改並重啟服務進程。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
