<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 唯有光头👴🏻才能变强💪</title>
    <link>https://xuzhijvn.github.io/zh-cn/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 唯有光头👴🏻才能变强💪</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Razon Yang. All Rights Reserved.</copyright>
    <lastBuildDate>Sat, 09 Oct 2021 14:38:30 +0800</lastBuildDate><atom:link href="https://xuzhijvn.github.io/zh-cn/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TopK</title>
      <link>https://xuzhijvn.github.io/zh-cn/posts/code/algorithm/topk/</link>
      <pubDate>Sat, 09 Oct 2021 14:38:30 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/zh-cn/posts/code/algorithm/topk/</guid>
      <description>public static int topK(int[] arr, int k) { if (arr == null || k &amp;gt; arr.length || arr.length == 0 || k &amp;lt;= 0) { return -1; } PriorityQueue&amp;lt;Integer&amp;gt; queue = new PriorityQueue&amp;lt;&amp;gt;(k, Comparator.reverseOrder()); for (int i = 0; i &amp;lt; k; i++) { queue.add(arr[i]); } for (int i = k; i &amp;lt; arr.length; i++) { if (queue.peek() &amp;gt; arr[i]) { queue.poll(); queue.add(arr[i]); } } return queue.peek(); } </description>
    </item>
    
    <item>
      <title>LRUCache</title>
      <link>https://xuzhijvn.github.io/zh-cn/posts/code/algorithm/lrucache/</link>
      <pubDate>Sat, 09 Oct 2021 14:24:56 +0800</pubDate>
      
      <guid>https://xuzhijvn.github.io/zh-cn/posts/code/algorithm/lrucache/</guid>
      <description>public class LRUCache&amp;lt;K,V&amp;gt;{ private final int cap; private final Map&amp;lt;K,V&amp;gt; map; private final LinkedList&amp;lt;K&amp;gt; list; public LRUCache(int cap) { this.cap = cap; map = new HashMap&amp;lt;&amp;gt;(cap); list = new LinkedList&amp;lt;&amp;gt;(); } public void put(K key, V value) { if (map.size() == cap){ K first = list.removeFirst(); map.remove(first); } list.addLast(key); map.put(key, value); } public V get(K key) { V value = map.get(key); if (value == null){ return null; }else { list.remove(key); list.</description>
    </item>
    
  </channel>
</rss>
